Index: jvb/src/org/jitsi/videobridge/rest/MuxServerConnector.java
Description: Removes MuxServerConnector as it is not compatible with available jetty8.
===================================================================
--- jvb.orig/src/org/jitsi/videobridge/rest/MuxServerConnector.java
+++ /dev/null
@@ -1,201 +0,0 @@
-/*
- * Copyright @ 2015 Atlassian Pty Ltd
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jitsi.videobridge.rest;
-
-import java.io.*;
-import java.lang.reflect.*;
-import java.net.*;
-import java.nio.channels.*;
-import java.util.*;
-
-import org.eclipse.jetty.server.*;
-import org.ice4j.socket.*;
-
-/**
- * Implements a Jetty {@code ServerConnector} which is capable of sharing its
- * listening endpoint by utilizing {@link MuxServerSocketChannel}.
- *
- * @author Lyubomir Marinov
- */
-public class MuxServerConnector
-    extends ServerConnector
-{
-    /**
-     * The {@code Field} reflection of the {@code _acceptChannel} field of the
-     * class {@code ServerConnector}. 
-     */
-    private static final Field ACCEPT_CHANNEL_FIELD;
-
-    /**
-     * The {@code DatagramPacketFilter} which demultiplexes HTTP(S) from
-     * {@link MuxServerSocketChannel} into {@code MuxServerConnector}.
-     */
-    private static final DatagramPacketFilter HTTP_DEMUX_FILTER;
-
-    /**
-     * The {@code Field} reflection of the {@code _localPort} field of the class
-     * {@code ServerConnector}. 
-     */
-    private static final Field LOCAL_PORT_FIELD;
-
-    static
-    {
-        // Allow the class MuxServerConnector to modify the private state of the
-        // class ServerConnector.
-        Field acceptChannelField = null;
-        Field localPortField = null;
-
-        try
-        {
-            Class<ServerConnector> clazz = ServerConnector.class;
-
-            acceptChannelField = clazz.getDeclaredField("_acceptChannel");
-            localPortField = clazz.getDeclaredField("_localPort");
-
-            acceptChannelField.setAccessible(true);
-            localPortField.setAccessible(true);
-        }
-        catch (NoSuchFieldException nsfe)
-        {
-        }
-        catch (SecurityException se)
-        {
-        }
-        if (acceptChannelField != null && localPortField != null)
-        {
-            ACCEPT_CHANNEL_FIELD = acceptChannelField;
-            LOCAL_PORT_FIELD = localPortField;
-        }
-        else
-        {
-            // If the class MuxServerConnector cannot modify the private state
-            // of the class ServerConnector, then a server will fail to bind if
-            // a sharing of its listening endpoint is necessary.
-            ACCEPT_CHANNEL_FIELD = null;
-            LOCAL_PORT_FIELD = null;
-        }
-
-        HTTP_DEMUX_FILTER = new HttpDemuxFilter();
-    }
-
-    /**
-     * Initializes a new <tt>MuxServerConnector</tt> instance.
-     *
-     * @param server the {@link Server} the new instance is to accept
-     * connections for
-     * @param factories the list of {@link ConnectionFactory} instances which
-     * are to create and configure connections
-     */
-    public MuxServerConnector(Server server, ConnectionFactory... factories)
-    {
-        super(server, factories);
-    }
-
-    /**
-     * Starts accepting incoming network connections.
-     *
-     * @throws IOException if this <tt>NetworkConnector</tt> cannot be opened
-     */
-    @Override
-    public void open()
-        throws IOException
-    {
-        Field acceptChannelField = ACCEPT_CHANNEL_FIELD;
-        Field localPortField = LOCAL_PORT_FIELD;
-
-        if (acceptChannelField != null && localPortField != null)
-        {
-            try
-            {
-                if (acceptChannelField.get(this) == null)
-                {
-                    ServerSocketChannel serverChannel = null;
-
-                    if (isInheritChannel())
-                    {
-                        Channel channel = System.inheritedChannel();
-
-                        if (channel instanceof ServerSocketChannel)
-                            serverChannel = (ServerSocketChannel) channel;
-                    }
-
-                    if (serverChannel == null)
-                    {
-                        // Instead of the opening and binding of a
-                        // ServerSocketChannel that the class ServerConnector
-                        // does, open and bind a MuxServerSocketChannel which
-                        // will allow sharing of the listening endpoint of this
-                        // MuxServerConnector.
-
-                        // properties
-                        Map<String,Object> properties
-                            = new HashMap<String,Object>();
-
-                        properties.put(
-                                MuxServerSocketChannelFactory
-                                    .SOCKET_REUSE_ADDRESS_PROPERTY_NAME,
-                                getReuseAddress());
-
-                        // endpoint
-                        String host = getHost();
-                        int port = getPort();
-                        InetSocketAddress endpoint;
-
-                        if (host == null)
-                            endpoint = new InetSocketAddress(port);
-                        else
-                            endpoint = new InetSocketAddress(host, port);
-
-                        serverChannel
-                            = MuxServerSocketChannelFactory
-                                .openAndBindMuxServerSocketChannel(
-                                        properties,
-                                        endpoint,
-                                        /* backlog */ getAcceptQueueSize(),
-                                        HTTP_DEMUX_FILTER);
-
-                        int localPort = serverChannel.socket().getLocalPort();
-
-                        localPortField.set(this, localPort);
-                        if (localPort <= 0)
-                            throw new IOException("Server channel not bound");
-                    }
-
-                    serverChannel.configureBlocking(true);
-                    addBean(serverChannel);
-
-                    acceptChannelField.set(this, serverChannel);
-                }
-            }
-            catch (Exception e)
-            {
-                if (e instanceof IOException)
-                    throw (IOException) e;
-                else if (e instanceof RuntimeException)
-                    throw (RuntimeException) e;
-                else
-                    throw new RuntimeException(e);
-            }
-        }
-        else
-        {
-            // If the class MuxServerConnector cannot modify the private state
-            // of the class ServerConnector, then a server will fail to bind if
-            // a sharing of its listening endpoint is necessary.
-            super.open();
-        }
-    }
-}
Index: jvb/src/org/jitsi/videobridge/rest/ProxyServletImpl.java
Description: Makes it compatible with jetty8.
===================================================================
--- jvb.orig/src/org/jitsi/videobridge/rest/ProxyServletImpl.java
+++ jvb/src/org/jitsi/videobridge/rest/ProxyServletImpl.java
@@ -11,7 +11,7 @@ import java.net.*;
 import javax.servlet.*;
 import javax.servlet.http.*;
 
-import org.eclipse.jetty.proxy.*;
+import org.eclipse.jetty.servlets.*;
 
 /**
  * Fixes defects of Jetty's {@code ProxyServlet}.
@@ -50,10 +50,15 @@ public class ProxyServletImpl
      * If Jetty's transparent {@code ProxyServlet} introduces a / at the end of
      * the request path, removes it (because such behavior is incorrect). 
      */
-    @Override
     protected URI rewriteURI(HttpServletRequest request)
     {
-        URI rewrittenURI = super.rewriteURI(request);
+        if (!validateDestination(request.getServerName(), request.getServletPath()))
+            return null;
+        StringBuffer uri = request.getRequestURL();
+        String query = request.getQueryString();
+        if (query != null)
+            uri.append("?").append(query);
+        URI rewrittenURI = URI.create(uri.toString());
 
         if (proxyTo != null)
         {
Index: jvb/src/org/jitsi/videobridge/rest/RESTBundleActivator.java
Description: Makes it compatible with jetty8.
===================================================================
--- jvb.orig/src/org/jitsi/videobridge/rest/RESTBundleActivator.java
+++ jvb/src/org/jitsi/videobridge/rest/RESTBundleActivator.java
@@ -11,10 +11,10 @@ import java.lang.reflect.*;
 import java.util.*;
 
 import org.eclipse.jetty.rewrite.handler.*;
-import org.eclipse.jetty.server.nio.*;
-import org.eclipse.jetty.server.ssl.*;
 import org.eclipse.jetty.server.*;
 import org.eclipse.jetty.server.handler.*;
+import org.eclipse.jetty.server.nio.*;
+import org.eclipse.jetty.server.ssl.*;
 import org.eclipse.jetty.servlet.*;
 import org.eclipse.jetty.util.ssl.*;
 import org.jitsi.service.configuration.*;
@@ -500,10 +500,7 @@ public class RESTBundleActivator
             {
                 // HTTP
                 connector = new SelectChannelConnector();
-//                    = new MuxServerConnector(
-//                            server,
-//                            new HttpConnectionFactory(httpCfg));
-//                connector.setPort(getCfgInt(JETTY_PORT_PNAME, 8080));
+                connector.setPort(getCfgInt(JETTY_PORT_PNAME, 8080));
             }
             else
             {
@@ -512,10 +509,10 @@ public class RESTBundleActivator
                     = ConfigUtils.getAbsoluteFile(
                             sslContextFactoryKeyStorePath,
                             cfg);
-                SslSelectChannelConnector sslConnector
-                    = new SslSelectChannelConnector();
+                connector = new SslSelectChannelConnector();
                 SslContextFactory sslContextFactory
-                    = sslConnector.getSslContextFactory();
+                    = ((SslSelectChannelConnector)connector)
+                        .getSslContextFactory();
                 String sslContextFactoryKeyStorePassword
                     = getCfgString(
                             JETTY_SSLCONTEXTFACTORY_KEYSTOREPASSWORD,
@@ -544,19 +541,7 @@ public class RESTBundleActivator
                 sslContextFactory.setNeedClientAuth(
                         sslContextFactoryNeedClientAuth);
 
-                //HttpConfiguration httpsCfg = new HttpConfiguration(httpCfg);
-
-                //httpsCfg.addCustomizer(new SecureRequestCustomizer());
-
-                connector = new SelectChannelConnector();
-//                    = new MuxServerConnector(
-//                            server,
-//                            new SslConnectionFactory(
-//                                    sslContextFactory,
-//                                    "http/1.1"),
-//                            new HttpConnectionFactory(httpsCfg));
                 connector.setPort(tlsPort);
-
             }
 
             String host = getCfgString(JETTY_HOST_PNAME, null);
