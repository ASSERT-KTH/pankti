#!/usr/bin/python
# -*- coding: utf-8 -*-
# Filename: diff-descartes-report.py

import csv
import sys
import argparse
import logging
import json
import copy

def get_arguments():
    parser = argparse.ArgumentParser(description="Check the classification of invoked methods based on descartes report",
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog="python diff-descartes-report.py -i <path/to/invoked-methods.csv> -d <path/to/methods.json> -o <path/to/output.csv>")

    parser.add_argument("-i", "--invoked_methods", required=True,
            help="the path to invoked-methods.csv")
    parser.add_argument("-d", "--descartes_report", required=True,
            help="the path to methods.json generated by descartes")
    parser.add_argument("-o", "--output", default="./invoked-methods-result.csv",
            help="the path to the output csv file (default: ./invoked-methods-result.csv)")
    args = parser.parse_args()

    return args

# return (headers, rows)
def read_from_csv(path):
    with open(path) as f:
        f_csv = csv.DictReader(f)
        return f_csv.fieldnames, list(f_csv)

def write2csv(path, headers, rows):
    with open(path, 'w') as file:
        f_csv = csv.DictWriter(file, headers)
        f_csv.writeheader()
        f_csv.writerows(rows)

def main():
    args = get_arguments()

    # load invoked-methods.csv
    headers, rows = read_from_csv(args.invoked_methods)
    headers.extend(["classification-after"])

    # load methods.json
    with open(args.descartes_report, 'rt') as file:
        descartes_report = json.load(file)

        # construct a dictionary whose key:value is: class-and-name:classification
        methods_classification = dict()
        for method in descartes_report["methods"]:
            full_name = "%s/%s/%s"%(method["package"], method["class"], method["name"])
            full_name = full_name.replace("/", ".")
            methods_classification[full_name] = method["classification"]

        result = list()
        improvement = {
            "pseudo-tested-before": 0,
            "not-covered-after": 0,
            "pseudo-tested-after": 0,
            "partially-tested-after": 0,
            "tested-after": 0
        }
        for row in rows:
            key = "%s.%s"%(row["parent-FQN"], row["method-name"])
            classification_after = methods_classification[key]
            row["classification-after"] = classification_after
            result.append(copy.copy(row))

            improvement["%s-before"%row["classification"]] = improvement["%s-before"%row["classification"]] + 1
            improvement["%s-after"%classification_after] = improvement["%s-after"%classification_after] + 1
        
        # write result to output file
        write2csv(args.output, headers, result)

        print("analysis finished")
        print(improvement)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()